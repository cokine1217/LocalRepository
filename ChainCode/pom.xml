<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>ChainCode</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
<!--设置maven编译器插件用于编译项目的源代码-->
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <repositories>
<!--aliyun镜像-->
        <repository>
            <id>aliyun</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
<!--超级账本结构 这是支持使用JVM运行时编写合约的项目 - 支持使用Java语言或其他基于JVM的语言进行开发-->
        <dependency>
            <groupId>org.hyperledger.fabric-chaincode-java</groupId>
            <artifactId>fabric-chaincode-shim</artifactId>
            <version>2.4.1</version>
        </dependency>
<!--&lt;!&ndash;Hyperldger Fabric Java 链码 protobuf 文件&ndash;&gt;-->
<!--        <dependency>-->
<!--            <groupId>org.hyperledger.fabric-chaincode-java</groupId>-->
<!--            <artifactId>fabric-chaincode-protos</artifactId>-->
<!--            <version>2.4.1</version>-->
<!--        </dependency>-->
<!--&lt;!&ndash;核心协议缓冲区库。协议缓冲区是一种以高效且可扩展的格式对结构化数据进行编码的方法。&ndash;&gt;-->
<!--        <dependency>-->
<!--            <groupId>com.google.protobuf</groupId>-->
<!--            <artifactId>protobuf-java</artifactId>-->
<!--            <version>3.21.7</version>-->
<!--        </dependency>-->
<!--为您的Java增添趣味：自动资源管理，自动生成获取器，设置器，等于，哈希码和toString等等！-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
<!--Fastjson是一个用Java编写的JSON处理器（JSON解析器+JSON生成器）-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>2.0.15</version>
        </dependency>
<!--工具包-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.15</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
<!--将项目类及其依赖项重新打包到单个 uber-jar 中，可以选择重命名类或删除未使用的类。如果不用无法部署到fabric上-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
<!--名字chaincode-->
                            <finalName>chaincode</finalName>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>org.hyperledger.fabric.contract.ContractRouter</mainClass>
                                </transformer>
                            </transformers>
                            <filters>
                                <filter>
                                    <!-- filter out signature files from signed dependencies, else repackaging fails with security ex -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>

                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>